#pragma once
#ifndef LOGGER_H
#define LOGGER_H
#include "consolecolors.h"
#include <iostream>
#include <string.h>

#ifndef __cplusplus
#error The c++ compiler should be used.
#endif


// With this command, we can disable all traces.
#ifndef TRACER
#define TRACER 1
#endif

#ifndef DEBUG
#define DEBUG 1
#endif


#ifndef LOGLEVEL
#warning LOGLEVEL name not set, sol LOGLEVEL set to 'defaultlogger'
#define LOGLEVEL defaultlogger
#endif

// Not so interesting part
#define rawstr(x) #x
#define namestr(x) rawstr(x)
#define annestr(x) namestr(x)
#define FILEWITHOUTPATH ( strrchr(__FILE__, '/') ? strrchr(__FILE__, '/') + 1 : strrchr(__FILE__, '\\') ? strrchr(__FILE__, '\\') + 1 : __FILE__ )
#define POS FILEWITHOUTPATH << ":" << __LINE__ <<  ": "
// End not so interesting part

/*---------------------------

For traces, we have different levels indications:
0: ALL Traces
1: Not in deepest loops
2: Subloops
3: Main loops, initialization

9: Highest TRACE level

10: DEBUG

19: highest DEBUG log
20: INFO

30: WARNING
----------------------------*/

// Initialize maxloglevel and BUILDINLOGLEVEL
#define MAXLOGLEVEL (5000) 	// To which the LOGLEVEL initially is set
// Define this preprocessor definition to overwrite
// Use -O flag for compiler to remove the dead functions!
// In that case all cout's for TRACE() are removed from code
#ifndef BUILDINLOGLEVEL
#define BUILDINLOGLEVEL (-10)
#endif


#define RAWWARNING(a) cout << red << a << def << "\n";
#define WARN(a) RAWWARNING("WARNING: " << POS  << a)
#define FATAL(a) TRACE(100,a)



// **************************************** The logger
#if TRACER == 1 or LOGGER == 1

#ifndef LOGLEVEL
#error LOGLEVEL not defined
#endif

#define RAWDEBUGLOG(a) LOG(10,"DEBUG - " << a)

extern int LOGLEVEL;

// Use this preprocessor command to introduce one LOGLEVEL integer per unit
/* Introduce one static logger */
// We trust that the compiler will eliminate 'dead code', which means
// that if variable BUILDINLOGLEVEL is set, the inner if statement
// will not be reached.
#define LOG(l,a)				\
  if(l>=BUILDINLOGLEVEL)\
    if(l>=LOGLEVEL)				\
      std::cout << a << "\n"; 


#define LOGTHIS					\
  int LOGLEVEL=MAXLOGLEVEL;

#else
#define LOGTHIS
#define LOG(l,a)
#endif	// ######################################## TRACER or LOGGER ==1




#if TRACER == 1			// Standard set to one
#define TRACELOG(a) TRACE(9,a)	// DEPRECATED!!
#define TRACE(l,a) LOG(l,"TRACE - " << (l) <<  " - " << annestr(LOGLEVEL) << " - " << POS << a)
#else
#define TRACELOG(a)
#define TRACE(l,a)
#endif	// TRACER == 1

#if DEBUG == 1			// Standard set to one
#define DEBUGLOG(a) DBG(19,a)
#define DBG(l,a) LOG(l,"DEBUG - " << POS << a)
#else
#define DEBUGLOG(a)
#define DBG(l,a)
#endif	// DEBIG == 1




// 
#if TRACER == 1 or LOGGER == 1
#define initlog(ll)								\
  std::cout << "Initlog with loglevel " << ll << " for " << annestr(LOGLEVEL) << "\n"; \
  LOGLEVEL=ll;

#define initotherlog(ll,mylogger)						\
  std::cout << "Initlog with loglevel " << ll << " for " << annestr(mylogger) << "\n"; \
  extern int mylogger; \
  mylogger=ll;

#else  // LOGGER !=1 or TRACER!=1
#define initlog(a)
#define initotherlog(a,mylogger)
#endif	// TRACER == 1 or LOGGER == 1



#endif	// LOGGER_H

